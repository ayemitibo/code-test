{"version":3,"sources":["Seed_Data.csv","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","filteredData","setFilteredData","searchField","setSearchField","dateField","setDateField","sortBy","setSortBy","sortOrder","setSortOrder","useEffect","txtFile","XMLHttpRequest","console","log","open","csvFile","onreadystatechange","lines","responseText","split","result","headers","i","length","obj","currentline","j","join","replaceAll","push","send","sort","a","b","firstComparator","Date","getTime","Number","secondComparator","sortDataBy","columnName","className","htmlFor","type","id","onChange","target","value","trim","reverse","name","style","width","onClick","map","item","index","pincodesMatch","deliveryPincode","includes","isSameDate","orderDate","startsWith","canShowItem","key","display","orderId","customerId","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3a58373.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Seed_Data.6c263390.csv\";","import React, { useEffect, useState } from \"react\";\nimport csvFile from \"./Seed_Data.csv\";\n\nconst App = () => {\n  const [filteredData, setFilteredData] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n  const [dateField, setDateField] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"deliveryPincode\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n\n  useEffect(() => {\n    var txtFile = new XMLHttpRequest();\n    console.log(\"here\");\n    txtFile.open(\"GET\", csvFile, false);\n    txtFile.onreadystatechange = function () {\n      var lines = txtFile.responseText.split(/\\r\\n|\\n/);\n\n      var result = [];\n\n      var headers = lines[0].split(\",\");\n\n      for (var i = 1; i < lines.length; i++) {\n        var obj = {};\n        var currentline = lines[i].split(\",\");\n\n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j]] = currentline[j]\n            .split(\";\")\n            .join(\",\")\n            .replaceAll(\":\", \"-\")\n            .replaceAll(\",\", \" \");\n        }\n\n        result.push(obj);\n      }\n      setFilteredData([...result]);\n    };\n    txtFile.send(null);\n  }, []);\n\n  useEffect(() => {\n    filteredData.length > 0 &&\n      setFilteredData(\n        filteredData.sort((a, b) => {\n          const firstComparator =\n            sortBy === \"orderDate\"\n              ? new Date(a[sortBy]).getTime()\n              : Number(a[sortBy]);\n          const secondComparator =\n            sortBy === \"orderDate\"\n              ? new Date(b[sortBy]).getTime()\n              : Number(b[sortBy]);\n\n          return sortOrder === \"asc\"\n            ? firstComparator - secondComparator\n            : secondComparator - firstComparator;\n        })\n      );\n  }, [sortBy, sortOrder, filteredData]);\n  const sortByPinCode = () => {};\n\n  const sortDataBy = (columnName) => {\n    setSortBy(columnName);\n    setSortOrder(sortOrder === \"desc\" ? \"asc\" : \"desc\");\n    console.log({ sortBy, sortOrder });\n  };\n\n  const filterByPinCode = ({ target }) => {\n    setSearchField(target.value.trim());\n  };\n\n  const filterByDate = ({ target }) => {\n    setDateField(target.value.split(\"-\").reverse().join(\"/\"));\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"col\">\n        <div className=\"col-md-12 \">\n          <div className=\"row justify-content-between\">\n            <div className=\"form-group col-3\">\n              <label htmlFor=\"simpleinput\">Pin Code : </label>\n              <input\n                type=\"text\"\n                id=\"simpleinput\"\n                className=\"form-control\"\n                onChange={filterByPinCode}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"example-date\">Date : </label>\n              <input\n                className=\"form-control\"\n                onChange={filterByDate}\n                id=\"example-date\"\n                type=\"date\"\n                name=\"date\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-12\">\n          <table\n            id=\"example\"\n            className=\"table table-striped table-bordered\"\n            style={{ width: \"100%\" }}\n          >\n            <thead>\n              <tr>\n                <th>Order Id</th>\n                <th>Cust Id</th>\n                <th\n                  className={`caret ${\n                    sortOrder === \"desc\" && sortBy === \"deliveryPincode\"\n                      ? \"caret-down\"\n                      : \"caret-up\"\n                  }`}\n                  onClick={() => sortDataBy(\"deliveryPincode\")}\n                >\n                  Pin Code\n                </th>\n                <th\n                  className={`caret ${\n                    sortOrder === \"desc\" && sortBy === \"orderDate\"\n                      ? \"caret-down\"\n                      : \"caret-up\"\n                  }`}\n                  onClick={() => sortDataBy(\"orderDate\")}\n                >\n                  Order Date\n                </th>\n                <th>Item</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredData.map((item, index) => {\n                const pincodesMatch = item.deliveryPincode.includes(\n                  searchField\n                );\n                const isSameDate = item.orderDate.startsWith(dateField);\n\n                const canShowItem = pincodesMatch && isSameDate;\n                return (\n                  <tr\n                    key={index}\n                    style={{\n                      display: canShowItem ? \"\" : \"none\",\n                    }}\n                  >\n                    <td>{item.orderId}</td>\n                    <td>{item.customerId}</td>\n                    <td>{item.deliveryPincode}</td>\n                    <td>{item.orderDate}</td>\n                    <td>{item.items}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}